name: Build and Create Draft Release

on:
  workflow_dispatch:
    inputs:
      projectVersion:
        description: 'Project version for the release'
        required: true
        default: 'v0.9.1'

jobs:
  build_and_package:
    name: Build for ${{ matrix.os_name_display }} (${{ matrix.rid }})
    runs-on: ${{ matrix.os_image }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - os_name_display: Windows
            os_image: windows-latest
            rid: win-x64
            exe_name: LynxHardwareCLI.exe
          - os_name_display: Windows
            os_image: windows-latest
            rid: win-arm64
            exe_name: LynxHardwareCLI.exe

          - os_name_display: Linux
            os_image: ubuntu-latest
            rid: linux-x64
            exe_name: LynxHardwareCLI
          - os_name_display: Linux
            os_image: ubuntu-latest
            rid: linux-arm64
            exe_name: LynxHardwareCLI

          - os_name_display: macOS
            os_image: macos-latest
            rid: osx-x64
            exe_name: LynxHardwareCLI
          - os_name_display: macOS
            os_image: macos-latest
            rid: osx-arm64
            exe_name: LynxHardwareCLI

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Publish (Framework-Dependent)
        run: dotnet build -c Release -r ${{ matrix.rid }} --output ./publish_output/${{ matrix.rid }} --self-contained false
        working-directory: ./LynxHardwareCLI

      - name: Set Project Name (Fixed)
        id: project_name
        run: echo "name=LynxHardwareCLI" >> $GITHUB_OUTPUT

      - name: Archive build output
        shell: bash
        run: |
          PROJECT_NAME=${{ steps.project_name.outputs.name }}
          VERSION=${{ github.event.inputs.projectVersion }}
          RID=${{ matrix.rid }}
          PROJECT_SUBDIR="LynxHardwareCLI"
          
          
          CONTENT_TO_ZIP_PATH="${GITHUB_WORKSPACE}/${PROJECT_SUBDIR}/publish_output/${RID}"
          
          ARCHIVE_DEST_DIR_PATH="${GITHUB_WORKSPACE}/${PROJECT_SUBDIR}/publish_output"
          ARCHIVE_NAME="${PROJECT_NAME}-${RID}-${VERSION}.zip"
          FULL_ARCHIVE_PATH="${ARCHIVE_DEST_DIR_PATH}/${ARCHIVE_NAME}"

          echo "Project Name: $PROJECT_NAME"
          echo "Version: $VERSION"
          echo "RID: $RID"
          echo "Directory to zip contents from: $CONTENT_TO_ZIP_PATH"
          echo "Archive will be created at: $FULL_ARCHIVE_PATH"
          echo "Executable Name: ${{ matrix.exe_name }}"
          
          
          if [ ! -f "${CONTENT_TO_ZIP_PATH}/${{ matrix.exe_name }}" ]; then
            echo "Error: Executable ${{ matrix.exe_name }} not found in ${CONTENT_TO_ZIP_PATH}"
            echo "Listing contents of ${CONTENT_TO_ZIP_PATH}:"
            ls -R "${CONTENT_TO_ZIP_PATH}"
            exit 1
          fi
          
          
          cd "${CONTENT_TO_ZIP_PATH}"
          zip -r "${FULL_ARCHIVE_PATH}" .
          cd "${GITHUB_WORKSPACE}" 

          echo "ASSET_PATH=${FULL_ARCHIVE_PATH}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "Archived successfully: ${FULL_ARCHIVE_PATH}"

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  create_draft_release:
    name: Create GitHub Draft Release
    needs: build_and_package
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release_assets/

      - name: List downloaded artifacts structure
        run: |
          echo "Listing contents of ./release_assets/:"
          ls -R ./release_assets/

      - name: Create Draft Release and Upload Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.event.inputs.projectVersion }}
        run: |
          echo "Creating draft release for tag: $TAG_NAME"

          gh release create "$TAG_NAME" \
            --draft \
            --title "Release $TAG_NAME" \
            --notes "Draft release for LynxHardwareCLI version $TAG_NAME. Build artifacts for Windows, Linux, and macOS are attached."

          echo "Uploading assets from ./release_assets/ to release $TAG_NAME"
          
          
          for artifact_collection_dir in ./release_assets/*; do
            if [ -d "$artifact_collection_dir" ]; then
          
          
              asset_file_name=$(basename "$artifact_collection_dir")
              asset_file_path="$artifact_collection_dir/$asset_file_name"

              if [ -f "$asset_file_path" ]; then
                echo "Uploading asset: $asset_file_path"
                gh release upload "$TAG_NAME" "$asset_file_path" --clobber
              else
                echo "Warning: Expected asset file $asset_file_path not found in $artifact_collection_dir."
                echo "Listing contents of $artifact_collection_dir:"
                ls -la "$artifact_collection_dir"
              fi
            fi
          done
          echo "Draft release $TAG_NAME created and assets uploaded successfully."