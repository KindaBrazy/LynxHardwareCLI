name: Build and Create Draft Release

on:
  workflow_dispatch:
    inputs:
      projectVersion:
        description: 'Project version for the release'
        required: true
        default: 'v0.9.1'

env:
  PROJECT_NAME_FIXED: LynxHardwareCLI

jobs:
  build_and_package:
    name: Build for ${{ matrix.os_name_display }} (${{ matrix.rid }})
    runs-on: ${{ matrix.os_image }}
    strategy:
      matrix:
        include:
          - os_name_display: Windows
            os_image: windows-latest
            rid: win-x64
            exe_name: LynxHardwareCLI.exe
          - os_name_display: Windows
            os_image: windows-latest
            rid: win-arm64
            exe_name: LynxHardwareCLI.exe
          - os_name_display: Linux
            os_image: ubuntu-latest
            rid: linux-x64
            exe_name: LynxHardwareCLI
          - os_name_display: Linux
            os_image: ubuntu-latest
            rid: linux-arm64
            exe_name: LynxHardwareCLI
          - os_name_display: macOS
            os_image: macos-latest
            rid: osx-x64
            exe_name: LynxHardwareCLI
          - os_name_display: macOS
            os_image: macos-latest
            rid: osx-arm64
            exe_name: LynxHardwareCLI

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Publish (Framework-Dependent)
        run: dotnet build LynxHardwareCLI.csproj -c Release -r ${{ matrix.rid }} --output ./publish_output/${{ matrix.rid }} --self-contained false

      - name: Archive build output (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ProjectName = "${{ env.PROJECT_NAME_FIXED }}"
          $Version = "${{ github.event.inputs.projectVersion }}"
          $Rid = "${{ matrix.rid }}"
          $ExeName = "${{ matrix.exe_name }}"

          $ContentToZipPath = Join-Path -Path "${{ github.workspace }}" -ChildPath "publish_output/${Rid}"
          $ArchiveDestDirPath = Join-Path -Path "${{ github.workspace }}" -ChildPath "publish_output"

          if ([string]::IsNullOrEmpty($ProjectName)) {
            Write-Error "Error: PROJECT_NAME is empty. Cannot create archive name."
            exit 1
          }
          $ArchiveName = "${ProjectName}-${Rid}-${Version}.zip"
          $FullArchivePath = Join-Path -Path $ArchiveDestDirPath -ChildPath $ArchiveName

          Write-Host "Project Name: $ProjectName"
          Write-Host "Version: $Version"
          Write-Host "RID: $Rid"
          Write-Host "Directory to zip contents from: $ContentToZipPath"
          Write-Host "Archive will be created at: $FullArchivePath"
          Write-Host "Executable Name: $ExeName"

          if (-not (Test-Path -Path $ContentToZipPath -PathType Container)) {
            Write-Error "Error: Publish output directory $ContentToZipPath not found."
            Write-Host "Listing contents of ${{ github.workspace }}/publish_output/:"
            Get-ChildItem -Path (Join-Path -Path "${{ github.workspace }}" -ChildPath "publish_output") -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
            Write-Host "Listing contents of ${{ github.workspace }}/:"
            Get-ChildItem -Path "${{ github.workspace }}" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
            exit 1
          }

          $ExePath = Join-Path -Path $ContentToZipPath -ChildPath $ExeName
          if (-not (Test-Path -Path $ExePath -PathType Leaf)) {
            Write-Error "Error: Executable $ExeName not found in $ContentToZipPath"
            Write-Host "Listing contents of ${ContentToZipPath}:"
            Get-ChildItem -Path $ContentToZipPath -Recurse -ErrorAction SilentlyContinue | Select-Object FullName
            exit 1
          }

          if (-not (Get-ChildItem -Path $ContentToZipPath)) {
            Write-Error "Error: No files found in $ContentToZipPath to zip."
            exit 1
          }
          
          Compress-Archive -Path (Get-ChildItem -Path $ContentToZipPath).FullName -DestinationPath $FullArchivePath -Force

          echo "ASSET_PATH=$FullArchivePath" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          echo "ASSET_NAME=$ArchiveName" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "Archived successfully: $FullArchivePath"

      - name: Archive build output (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          PROJECT_NAME="${{ env.PROJECT_NAME_FIXED }}"
          VERSION="${{ github.event.inputs.projectVersion }}"
          RID="${{ matrix.rid }}"
          EXE_NAME="${{ matrix.exe_name }}"
          
          CONTENT_TO_ZIP_PATH="${GITHUB_WORKSPACE}/publish_output/${RID}"
          ARCHIVE_DEST_DIR_PATH="${GITHUB_WORKSPACE}/publish_output"

          if [ -z "$PROJECT_NAME" ]; then
            echo "Error: PROJECT_NAME is empty. Cannot create archive name."
            exit 1
          fi
          ARCHIVE_NAME="${PROJECT_NAME}-${RID}-${VERSION}.zip"
          FULL_ARCHIVE_PATH="${ARCHIVE_DEST_DIR_PATH}/${ARCHIVE_NAME}"

          echo "Project Name: $PROJECT_NAME"
          echo "Version: $VERSION"
          echo "RID: $RID"
          echo "Directory to zip contents from: $CONTENT_TO_ZIP_PATH"
          echo "Archive will be created at: $FULL_ARCHIVE_PATH"
          echo "Executable Name: $EXE_NAME"
          
          if [ ! -d "${CONTENT_TO_ZIP_PATH}" ]; then
            echo "Error: Publish output directory ${CONTENT_TO_ZIP_PATH} not found."
            echo "Listing contents of ${GITHUB_WORKSPACE}/publish_output/:"
            ls -R "${GITHUB_WORKSPACE}/publish_output" || echo "Failed to list publish_output"
            echo "Listing contents of ${GITHUB_WORKSPACE}/:"
            ls -R "${GITHUB_WORKSPACE}" || echo "Failed to list GITHUB_WORKSPACE"
            exit 1
          fi
          
          if [ ! -f "${CONTENT_TO_ZIP_PATH}/${EXE_NAME}" ]; then
            echo "Error: Executable ${EXE_NAME} not found in ${CONTENT_TO_ZIP_PATH}"
            echo "Listing contents of ${CONTENT_TO_ZIP_PATH}:"
            ls -R "${CONTENT_TO_ZIP_PATH}" || echo "Failed to list CONTENT_TO_ZIP_PATH"
            exit 1
          fi
          
          cd "${CONTENT_TO_ZIP_PATH}"
          if [ -z "$(ls -A .)" ]; then
            echo "Error: No files found in ${CONTENT_TO_ZIP_PATH} to zip."
            cd "${GITHUB_WORKSPACE}" 
            exit 1
          fi

          zip -r "${FULL_ARCHIVE_PATH}" .
          cd "${GITHUB_WORKSPACE}" 

          echo "ASSET_PATH=${FULL_ARCHIVE_PATH}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "Archived successfully: ${FULL_ARCHIVE_PATH}"

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  create_draft_release:
    name: Create GitHub Draft Release
    needs: build_and_package
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./temp_release_assets/

      - name: List downloaded artifacts structure (before restructuring)
        run: |
          echo "Listing contents of ./temp_release_assets/:"
          ls -R ./temp_release_assets/
          echo "---"

      - name: Restructure downloaded artifacts
        id: restructure
        run: |
          mkdir -p ./release_assets
          shopt -s nullglob # Prevent errors if no artifact directories are found
          for artifact_dir in ./temp_release_assets/*; do
            if [ -d "$artifact_dir" ]; then
              # Move the actual asset file(s) from inside the artifact_dir to release_assets
              # This assumes each artifact_dir contains one or more files that are the actual assets.
              # Given default download behavior, this will be artifact_name_dir/artifact_name_file
              echo "Processing artifact directory: $artifact_dir"
              mv "$artifact_dir"/* ./release_assets/
            fi
          done
          rm -rf ./temp_release_assets
          echo "Listing contents of ./release_assets/ (after restructuring):"
          ls -R ./release_assets/
          echo "---"

      - name: Create Draft Release and Upload Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.event.inputs.projectVersion }}
          PROJECT_NAME_FIXED: ${{ env.PROJECT_NAME_FIXED }}
        run: |
          echo "Creating draft release for tag: $TAG_NAME on repo $GITHUB_REPOSITORY"
          
          gh release create "$TAG_NAME" \
            --repo "$GITHUB_REPOSITORY" \
            --draft \
            --title "Release $TAG_NAME" \
            --notes "Draft release for ${PROJECT_NAME_FIXED} version $TAG_NAME. Build artifacts for Windows, Linux, and macOS are attached."
          
          echo "Uploading assets from ./release_assets/ to release $TAG_NAME"
          
          if [ -z "$(ls -A ./release_assets)" ]; then
            echo "No assets found in ./release_assets to upload."
            exit 1 # Or handle as a non-error if appropriate
          fi
          
          for asset_file_path in ./release_assets/*; do
            if [ -f "$asset_file_path" ]; then
              asset_file_name=$(basename "$asset_file_path")
              echo "Uploading asset: $asset_file_path (as $asset_file_name)"
              gh release upload "$TAG_NAME" "$asset_file_path" --repo "$GITHUB_REPOSITORY" --clobber
            else
              echo "Warning: Found item $asset_file_path in ./release_assets which is not a file. Skipping."
            fi
          done
          echo "Draft release $TAG_NAME created and assets uploaded successfully."